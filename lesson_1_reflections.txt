How did viewing a diff between two versions of a file help you see the bug that
was introduced?

- It located and displayed the line of code that changed between the working
  version and the broken version.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

- It will help me to more quickly associate changes in code to unexpected
  (or expected) changes in behavior of the app. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

- The code that gets automatically committed may not compile and/or may not be
  logical (e.g. you were in the middle of changing something). Manual allows
  you to make the best judgement call to ensure commits are logical units of
  work. Having things automatically saved, on the other hand, does save the
  time of having to manually commit, but it may create much more work in the
  long run when you are trying to figure out when a bug was introduced. Not
  only will you have to fix potentially broken code, every time you do that,
  you'll have to figure out whether the bug was introduced before or after
  that commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

- Because often when programming, files are interrelated and interdependent on
  each other, whereas with regular "office" documents, in most cases they're
  completely independent of each other and can be used individually.

How can you use the commands git log and git diff to view the history of files?

- git log will give me an entire overview of all the previous commits to files 
  in the repository. git diff will show me the detailed differences between two
  different commits of my choosing.

How might using version control make you more confident to make changes that
could break something?

- I'll have peace of mind that we can always revert to a previous version that
  we knew worked fine, before I broke stuff.

Now that you have your workspace set up, what do you want to try using Git for?

- I definitely want to use git for all of my coding in the future.