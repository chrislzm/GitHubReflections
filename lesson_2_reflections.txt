What happens when you initialize a repository? Why do you need to do it?

- Git creates a .git directory in the directory you created the repository which contains all of the meta data for the repository. You need to do this so that git knows there's a repository and so it can manage it correctly.

How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area is a holding place for files you want to commit but haven't been committed to the repository yet. The working directory is the current directory of files of which you don't necissarily want to commit all of them. This is good because you may have some huge video files in the directory you don't need to commit, or files that will never change, or unrelated files, etc. This gives you more control.

How can you use the staging area to make sure you have one commit per logical change?

- This way we can add only the files we want to commit and ignore changes in other files, to make commits more logical.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- Branches would be useful when experimenting with adding a new feature or changes to the app by not messing with the current working version of the app.

How do the diagrams help you visualize the branch structure?

- It helps show how everything in the repository relates to each other, and where some information might potentially get lost if its not in a branch, or where things may conflict with each other in the future.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging the two branches together is that the code is combined. We show in the diagram because that's the easy way to show visually that two branches were merged into one.
